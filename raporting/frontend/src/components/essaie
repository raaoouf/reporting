// <!-- import React, { useState, useEffect, useRef } from 'react';
// import './Table.css';
// import Image from './Image.png';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { faExclamationCircle } from '@fortawesome/free-solid-svg-icons';

// function ViewBrqPage() {
//   const [tableData, setTableData] = useState([]);
//   const [userRole, setUserRole] = useState('');
//   const [showClaimInput, setShowClaimInput] = useState(false);
//   const [claimText, setClaimText] = useState('');
//   const [modalOpen, setModalOpen] = useState(false);
//   const [selectedItem, setSelectedItem] = useState(null);
//   const user = JSON.parse(localStorage.getItem('user'));

//   const fetchData = async () => {
//     try {
//       const userState = JSON.parse(localStorage.getItem('user'));
//       const site = userState ? userState.site : null;
//       const userRole = userState ? userState.role : null;
//       setUserRole(userRole);

//       if (!site || !userRole) {
//         console.error('Site information or user role not found in local storage');
//         return;
//       }

//       const response = await fetch(`http://127.0.0.1:8000/api/sitej/`, {
//         method: "GET",
//         headers: {
//           'Authorization': `Bearer ${user.token}`,
//         },
//       });
//       if (!response.ok) {
//         throw new Error('Network response was not ok');
//       }
//       const jsonData = await response.json();
//       setTableData(jsonData);
//     } catch (error) {
//       console.error('Error fetching data:', error);
//     }
//   };

//   const handleDelete = async (id) => {
//     try {
//       const response = await fetch(`http://127.0.0.1:8000/api/delete-brq/${id}/`, {
//         method: 'DELETE',
//         headers: {
//           'Authorization': `Bearer ${user.token}`,
//         },
//       });
//       if (!response.ok) {
//         throw new Error('Failed to delete BRQ');
//       }
//       fetchData();
//     } catch (error) {
//       console.error('Error deleting BRQ:', error);
//     }
//   };

//   const handleClaimClick = () => {
//     setShowClaimInput(!showClaimInput);
//   };

//   const handleClaimInputChange = (event) => {
//     setClaimText(event.target.value);
//   };

//   const handleCancelClaim = () => {
//     setShowClaimInput(false);
//     setClaimText('');
//   };

//   const handleConfirmClaim = async () => {
//     try {
//       const response = await fetch('http://127.0.0.1:8000/api/report-problem', {
//         method: 'POST',
//         headers: {
//           'Authorization': `Bearer ${user.token}`,
//           'Content-Type': 'application/json'
//         },
//         body: JSON.stringify({ brq_text: claimText })
//       });

//       if (!response.ok) {
//         throw new Error('Failed to report problem');
//       }

//       const result = await response.json();
//       console.log('Problem reported:', result);
//       setShowClaimInput(false);
//       setClaimText('');
//     } catch (error) {
//       console.error('Error reporting problem:', error);
//     }
//   };

//   const handleValidation = async () => {
//     try {
//       const userState = JSON.parse(localStorage.getItem('user'));
//       const date = new Date().toLocaleDateString();
//       const site = userState ? userState.site : null;
//       const userName = userState ? userState.username : null;

//       const requestBody = {
//         date: date,
//         site: site,
//         validated_by: userName
//       };

//       const response = await fetch('http://127.0.0.1:8000/api/valider-brq/', {
//         method: 'PATCH',
//         headers: {
//           'Authorization': `Bearer ${userState.token}`,
//           'Content-Type': 'application/json'
//         },
//         body: JSON.stringify(requestBody)
//       });

//       if (!response.ok) {
//         throw new Error('Validation failed');
//       }

//       fetchData();
//     } catch (error) {
//       console.error('Error validating BRQs:', error);
//     }
//   };

//   const handleEditClick = (item) => {
//     setSelectedItem(item);
//     setModalOpen(true);
//   };

//   const handleModalClose = () => {
//     setModalOpen(false);
//   };

//   const handleEditChange = (e) => {
//     const { name, value } = e.target;
//     setSelectedItem(prevState => ({
//       ...prevState,
//       [name]: value
//     }));
//   };

//   const handleEditSubmit = async () => {
//     try {
//       const response = await fetch(`http://127.0.0.1:8000/api/update-brq/${selectedItem.id}/`, {
//         method: 'PUT',
//         headers: {
//           'Authorization': `Bearer ${user.token}`,
//           'Content-Type': 'application/json'
//         },
//         body: JSON.stringify(selectedItem)
//       });
//       if (!response.ok) {
//         throw new Error('Failed to update BRQ');
//       }
//       fetchData();
//       setModalOpen(false);
//     } catch (error) {
//       console.error('Error updating BRQ:', error);
//     }
//   };

//   useEffect(() => {
//     fetchData();
//   }, []);

//   return (
//     <div className="table-container">
//       <div>
       
//         <img className="image" src={Image} alt="Your Image" />
//         <h1 className="activite">Bulletin de Reporting Quotidien (BRQ)</h1>
//       </div>
//       <div className="data">
//         <div className="date-rectangle">
//           <p>Date: {new Date().toLocaleDateString()}</p>
//         </div>
//         <div className="claim-button-container">
//           <button className="claim-button" onClick={handleClaimClick}>
//             <FontAwesomeIcon icon={faExclamationCircle} />
//           </button>
//           {showClaimInput && (
//             <div className="claim-input-container">
//               <textarea
//                 placeholder="Entrez votre réclamation ici..."
//                 value={claimText}
//                 onChange={handleClaimInputChange}
//                 rows={4} // Ajustez le nombre de lignes si nécessaire
//                 cols={50} // Ajustez le nombre de colonnes si nécessaire
//               />
//               <div>
//                 <button onClick={handleConfirmClaim} className="small-button">Confirmer</button>
//                 <button onClick={handleCancelClaim} className="small-button">Annuler</button>
//               </div>
//             </div>
//           )}
//         </div>
//       </div>
//       <div className="activite">
//         <h1>Activite raffinage etpetrochimie</h1>
//       </div>
//       <table>
//         <thead>
//           <tr>
//             <th rowSpan="2">Structure</th>
//             <th rowSpan="2">Date</th>
//             <th rowSpan="2">Heure</th>
//             <th rowSpan="2">Lieu</th>
//             <th rowSpan="2">Nature</th>
//             <th rowSpan="2">Description Succincte</th>
//             <th rowSpan="2">Cause de l'incident / accident</th>
//             <th colSpan="4">Fatalités</th>
//             <th rowSpan="2">Nombre Blessés</th>
//             <th colSpan="3">Description</th>
//             <th rowSpan="2">Disposition prise</th>
//             <th rowSpan="2">Actions</th> {/* Nouvelle colonne pour les actions */}
//           </tr>
//           <tr>
//             <th>Entreprise</th>
//             <th>Prestataire</th>
//             <th>Tiers</th>
//             <th>Étrangers</th>
//             <th>Corporels</th>
//             <th>Matériels</th>
//             <th>Environnementaux</th>
//           </tr>
//         </thead>
//         <tbody>
//           {tableData.map(item => (
//             <tr key={item.id}>
// <td>
//   {selectedItem === item ? (
//     <input
//       type="text"
//       name="site_ai"
//       value={selectedItem.site_ai}
//       onChange={handleEditChange}
//       style={{ width: `${selectedItem.site_ai ? selectedItem.site_ai.length : 20}ch` }}
//     />
//   ) : (
//     item.site_ai
//   )}
// </td>              <td>{selectedItem === item ? <input type="text" name="date_ai" value={selectedItem.date_ai} onChange={handleEditChange}style={{ width: `${item.date_ai ? item.date_ai.length : 20}ch` }}/> : item.date_ai}</td>
//               <td>{selectedItem === item ? <input type="text" name="heure_ai" value={selectedItem.heure_ai} onChange={handleEditChange} style={{ width: `${item.heure_ai.length}ch` }} /> : item.heure_ai}</td>
//               <td>{selectedItem === item ? <input type="text" name="lieu_ai" value={selectedItem.lieu_ai} onChange={handleEditChange} style={{ width: `${item.lieu_ai.length}ch` }} /> : item.lieu_ai}</td>
//               <td>{selectedItem === item ? <input type="text" name="nature" value={selectedItem.nature} onChange={handleEditChange} style={{ width: `${item.nature.length}ch` }} /> : item.nature}</td>
//               <td>{selectedItem === item ? <input type="text" name="desc_succincte" value={selectedItem.desc_succincte} onChange={handleEditChange} style={{ width: `${item.desc_succincte.length}ch` }} /> : item.desc_succincte}</td>
//               <td>{selectedItem === item ? <input type="text" name="cause_ai" value={selectedItem.cause_ai} onChange={handleEditChange} style={{ width: `${item.cause_ai.length}ch` }} /> : item.cause_ai}</td>
//               <td>{selectedItem === item ? <input type="text" name="fatal_entreprise" value={selectedItem.fatal_entreprise} onChange={handleEditChange} style={{ width: `${item.fatal_entreprise.length}ch` }} /> : item.fatal_entreprise}</td>
//               <td>{selectedItem === item ? <input type="text" name="fatal_prestataire" value={selectedItem.fatal_prestataire} onChange={handleEditChange} style={{ width: `${item.fatal_prestataire.length}ch` }} /> : item.fatal_prestataire}</td>
//               <td>{selectedItem === item ? <input type="text" name="fatal_tiers" value={selectedItem.fatal_tiers} onChange={handleEditChange} style={{ width: `${item.fatal_tiers.length}ch` }} /> : item.fatal_tiers}</td>
//               <td>{selectedItem === item ? <input type="text" name="fatal_etrangers" value={selectedItem.fatal_etrangers} onChange={handleEditChange} style={{ width: `${item.fatal_etrangers.length}ch` }} /> : item.fatal_etrangers}</td>
//               <td>{selectedItem === item ? <input type="text" name="nbr_blesse" value={selectedItem.nbr_blesse} onChange={handleEditChange} style={{ width: `${item.nbr_blesse.length}ch` }} /> : item.nbr_blesse}</td>
//               <td>{selectedItem === item ? <input type="text" name="desc_degats_corporels" value={selectedItem.desc_degats_corporels} onChange={handleEditChange} style={{ width: `${item.desc_degats_corporels.length}ch` }} /> : item.desc_degats_corporels}</td>
//               <td>{selectedItem === item ? <input type="text" name="desc_degats_materiels" value={selectedItem.desc_degats_materiels} onChange={handleEditChange} style={{ width: `${item.desc_degats_materiels.length}ch` }} /> : item.desc_degats_materiels}</td>
//               <td>{selectedItem === item ? <input type="text" name="desc_degats_environnementaux" value={selectedItem.desc_degats_environnementaux} onChange={handleEditChange} style={{ width: `${item.desc_degats_environnementaux.length}ch` }} /> : item.desc_degats_environnementaux}</td>
//               <td>{selectedItem === item ? <input type="text" name="dispositons_prise" value={selectedItem.dispositons_prise} onChange={handleEditChange} style={{ width: `${item.dispositons_prise.length}ch` }} /> : item.dispositons_prise}</td>
//               <td>
//                 {selectedItem === item ? (
//                   <button className="submit-button" onClick={handleEditSubmit}>Enregistrer</button>
//                 ) : (
//                   <div>
//                     <button className="submit-button" onClick={() => handleEditClick(item)}>Modifier</button>
//                     <button className="submit-button" onClick={() => handleDelete(item.id)}>Supprimer</button>
// </div>
// )}
// </td>
// </tr>
// ))}
// </tbody>
// </table>
// <button className="submit-button" onClick={handleValidation}>Valider</button>
// </div>
// );
// }

// export default ViewBrqPage;
//  -->
